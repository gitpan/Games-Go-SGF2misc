diff -urP ParseLex-2.15/lib/Parse/Template.pm ParseLex-2.15.jet/lib/Parse/Template.pm
--- ParseLex-2.15/lib/Parse/Template.pm	Thu Sep 23 04:16:28 1999
+++ ParseLex-2.15.jet/lib/Parse/Template.pm	Mon Mar 22 09:11:34 2004
@@ -1,4 +1,4 @@
-use strict
+use strict;
 require 5.004;
 package Parse::Template;
 $Parse::Template::VERSION = '0.32';
@@ -132,7 +132,7 @@
   }
   # evaluated expressions are not always available in (caller(1))[6];	
   if (defined($1) and $1 ne '') {
-    $expr = $1;			# what is the  template expression?
+    my $expr = $1;			# what is the  template expression?
     { package DB;		# what is the part name?
       @DB::caller = caller(2);	# why is this needed? /ee?
       @DB::caller = caller(1);
diff -urP ParseLex-2.15/t/test4.t ParseLex-2.15.jet/t/test4.t
--- ParseLex-2.15/t/test4.t	Thu Sep 23 04:16:26 1999
+++ ParseLex-2.15.jet/t/test4.t	Mon Mar 22 09:12:04 2004
@@ -1,5 +1,8 @@
 #!/usr/local/bin/perl
 
+# open OUTE, ">ex.txt" or die $!;
+# open OUTR, ">re.txt" or die $!;
+
 BEGIN {  
   push(@INC, './t');
 }
@@ -10,6 +13,8 @@
 print $test->report(1, sub { 
 		      my $expectation =  $test->expected;
 		      my $result =  $test->result;
+		      # print OUTE "Expectation:\n$expectation\n";
+		      # print OUTR "Result:\n$result\n";
 		      $expectation =~ s/\s+$//;
 		      $result =~ s/\s+$//;
 		      unless ($expectation eq $result) {
@@ -54,4 +59,4 @@
 [main::lexer|Parse::CLex] Token read (NEWLINE, \n): 
 
 [main::lexer|Parse::CLex] Token read (ERROR, .*): this is an invalid string with a "" in it"
-can't analyze: "this is an invalid string with a "" in it"" at examples/ctokenizer.pl line 17, <DATA> chunk 4.
+can't analyze: "this is an invalid string with a "" in it"" at examples/ctokenizer.pl line 17, <DATA> line 4.
